// Code generated by mockery v2.50.4. DO NOT EDIT.

package mocks

import (
	context "context"

	usecase "github.com/AbdulRasyid-Ans/xyz-multifinance/internal/usecase"
	mock "github.com/stretchr/testify/mock"
)

// MerchantUsecase is an autogenerated mock type for the MerchantUsecase type
type MerchantUsecase struct {
	mock.Mock
}

// CreateMerchant provides a mock function with given fields: ctx, request
func (_m *MerchantUsecase) CreateMerchant(ctx context.Context, request usecase.MerchantRequest) error {
	ret := _m.Called(ctx, request)

	if len(ret) == 0 {
		panic("no return value specified for CreateMerchant")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, usecase.MerchantRequest) error); ok {
		r0 = rf(ctx, request)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// DeleteMerchant provides a mock function with given fields: ctx, id
func (_m *MerchantUsecase) DeleteMerchant(ctx context.Context, id int64) error {
	ret := _m.Called(ctx, id)

	if len(ret) == 0 {
		panic("no return value specified for DeleteMerchant")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, int64) error); ok {
		r0 = rf(ctx, id)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// FetchMerchant provides a mock function with given fields: ctx, req
func (_m *MerchantUsecase) FetchMerchant(ctx context.Context, req usecase.FetchMerchantRequest) ([]usecase.GetMerchantResponse, error) {
	ret := _m.Called(ctx, req)

	if len(ret) == 0 {
		panic("no return value specified for FetchMerchant")
	}

	var r0 []usecase.GetMerchantResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, usecase.FetchMerchantRequest) ([]usecase.GetMerchantResponse, error)); ok {
		return rf(ctx, req)
	}
	if rf, ok := ret.Get(0).(func(context.Context, usecase.FetchMerchantRequest) []usecase.GetMerchantResponse); ok {
		r0 = rf(ctx, req)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]usecase.GetMerchantResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, usecase.FetchMerchantRequest) error); ok {
		r1 = rf(ctx, req)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetMerchantByID provides a mock function with given fields: ctx, id
func (_m *MerchantUsecase) GetMerchantByID(ctx context.Context, id int64) (usecase.GetMerchantResponse, error) {
	ret := _m.Called(ctx, id)

	if len(ret) == 0 {
		panic("no return value specified for GetMerchantByID")
	}

	var r0 usecase.GetMerchantResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, int64) (usecase.GetMerchantResponse, error)); ok {
		return rf(ctx, id)
	}
	if rf, ok := ret.Get(0).(func(context.Context, int64) usecase.GetMerchantResponse); ok {
		r0 = rf(ctx, id)
	} else {
		r0 = ret.Get(0).(usecase.GetMerchantResponse)
	}

	if rf, ok := ret.Get(1).(func(context.Context, int64) error); ok {
		r1 = rf(ctx, id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateMerchant provides a mock function with given fields: ctx, id, request
func (_m *MerchantUsecase) UpdateMerchant(ctx context.Context, id int64, request usecase.MerchantRequest) error {
	ret := _m.Called(ctx, id, request)

	if len(ret) == 0 {
		panic("no return value specified for UpdateMerchant")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, int64, usecase.MerchantRequest) error); ok {
		r0 = rf(ctx, id, request)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// NewMerchantUsecase creates a new instance of MerchantUsecase. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMerchantUsecase(t interface {
	mock.TestingT
	Cleanup(func())
}) *MerchantUsecase {
	mock := &MerchantUsecase{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
