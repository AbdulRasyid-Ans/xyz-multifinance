// Code generated by mockery v2.50.4. DO NOT EDIT.

package mocks

import (
	context "context"

	usecase "github.com/AbdulRasyid-Ans/xyz-multifinance/internal/usecase"
	mock "github.com/stretchr/testify/mock"
)

// LoanUsecase is an autogenerated mock type for the LoanUsecase type
type LoanUsecase struct {
	mock.Mock
}

// CreateLoan provides a mock function with given fields: ctx, req
func (_m *LoanUsecase) CreateLoan(ctx context.Context, req usecase.CreateLoanRequest) (usecase.LoanResponse, error) {
	ret := _m.Called(ctx, req)

	if len(ret) == 0 {
		panic("no return value specified for CreateLoan")
	}

	var r0 usecase.LoanResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, usecase.CreateLoanRequest) (usecase.LoanResponse, error)); ok {
		return rf(ctx, req)
	}
	if rf, ok := ret.Get(0).(func(context.Context, usecase.CreateLoanRequest) usecase.LoanResponse); ok {
		r0 = rf(ctx, req)
	} else {
		r0 = ret.Get(0).(usecase.LoanResponse)
	}

	if rf, ok := ret.Get(1).(func(context.Context, usecase.CreateLoanRequest) error); ok {
		r1 = rf(ctx, req)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteLoanByID provides a mock function with given fields: ctx, loanID
func (_m *LoanUsecase) DeleteLoanByID(ctx context.Context, loanID int64) error {
	ret := _m.Called(ctx, loanID)

	if len(ret) == 0 {
		panic("no return value specified for DeleteLoanByID")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, int64) error); ok {
		r0 = rf(ctx, loanID)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GetLoanByConsumerID provides a mock function with given fields: ctx, consumerID
func (_m *LoanUsecase) GetLoanByConsumerID(ctx context.Context, consumerID int64) ([]usecase.LoanResponse, error) {
	ret := _m.Called(ctx, consumerID)

	if len(ret) == 0 {
		panic("no return value specified for GetLoanByConsumerID")
	}

	var r0 []usecase.LoanResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, int64) ([]usecase.LoanResponse, error)); ok {
		return rf(ctx, consumerID)
	}
	if rf, ok := ret.Get(0).(func(context.Context, int64) []usecase.LoanResponse); ok {
		r0 = rf(ctx, consumerID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]usecase.LoanResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, int64) error); ok {
		r1 = rf(ctx, consumerID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetLoanByID provides a mock function with given fields: ctx, loanID
func (_m *LoanUsecase) GetLoanByID(ctx context.Context, loanID int64) (usecase.LoanResponse, error) {
	ret := _m.Called(ctx, loanID)

	if len(ret) == 0 {
		panic("no return value specified for GetLoanByID")
	}

	var r0 usecase.LoanResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, int64) (usecase.LoanResponse, error)); ok {
		return rf(ctx, loanID)
	}
	if rf, ok := ret.Get(0).(func(context.Context, int64) usecase.LoanResponse); ok {
		r0 = rf(ctx, loanID)
	} else {
		r0 = ret.Get(0).(usecase.LoanResponse)
	}

	if rf, ok := ret.Get(1).(func(context.Context, int64) error); ok {
		r1 = rf(ctx, loanID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewLoanUsecase creates a new instance of LoanUsecase. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewLoanUsecase(t interface {
	mock.TestingT
	Cleanup(func())
}) *LoanUsecase {
	mock := &LoanUsecase{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
