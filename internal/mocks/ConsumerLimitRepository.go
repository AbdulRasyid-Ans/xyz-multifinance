// Code generated by mockery v2.50.4. DO NOT EDIT.

package mocks

import (
	context "context"

	repository "github.com/AbdulRasyid-Ans/xyz-multifinance/internal/repository"
	mock "github.com/stretchr/testify/mock"
)

// ConsumerLimitRepository is an autogenerated mock type for the ConsumerLimitRepository type
type ConsumerLimitRepository struct {
	mock.Mock
}

// CreateConsumerLimit provides a mock function with given fields: ctx, consumerLimit
func (_m *ConsumerLimitRepository) CreateConsumerLimit(ctx context.Context, consumerLimit repository.ConsumerLimit) (int64, error) {
	ret := _m.Called(ctx, consumerLimit)

	if len(ret) == 0 {
		panic("no return value specified for CreateConsumerLimit")
	}

	var r0 int64
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, repository.ConsumerLimit) (int64, error)); ok {
		return rf(ctx, consumerLimit)
	}
	if rf, ok := ret.Get(0).(func(context.Context, repository.ConsumerLimit) int64); ok {
		r0 = rf(ctx, consumerLimit)
	} else {
		r0 = ret.Get(0).(int64)
	}

	if rf, ok := ret.Get(1).(func(context.Context, repository.ConsumerLimit) error); ok {
		r1 = rf(ctx, consumerLimit)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteConsumerLimit provides a mock function with given fields: ctx, consumerLimitID
func (_m *ConsumerLimitRepository) DeleteConsumerLimit(ctx context.Context, consumerLimitID int64) error {
	ret := _m.Called(ctx, consumerLimitID)

	if len(ret) == 0 {
		panic("no return value specified for DeleteConsumerLimit")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, int64) error); ok {
		r0 = rf(ctx, consumerLimitID)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GetConsumerLimitByConsumerID provides a mock function with given fields: ctx, consumerID
func (_m *ConsumerLimitRepository) GetConsumerLimitByConsumerID(ctx context.Context, consumerID int64) ([]repository.ConsumerLimit, error) {
	ret := _m.Called(ctx, consumerID)

	if len(ret) == 0 {
		panic("no return value specified for GetConsumerLimitByConsumerID")
	}

	var r0 []repository.ConsumerLimit
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, int64) ([]repository.ConsumerLimit, error)); ok {
		return rf(ctx, consumerID)
	}
	if rf, ok := ret.Get(0).(func(context.Context, int64) []repository.ConsumerLimit); ok {
		r0 = rf(ctx, consumerID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]repository.ConsumerLimit)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, int64) error); ok {
		r1 = rf(ctx, consumerID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetConsumerLimitByID provides a mock function with given fields: ctx, consumerLimitID
func (_m *ConsumerLimitRepository) GetConsumerLimitByID(ctx context.Context, consumerLimitID int64) (repository.ConsumerLimit, error) {
	ret := _m.Called(ctx, consumerLimitID)

	if len(ret) == 0 {
		panic("no return value specified for GetConsumerLimitByID")
	}

	var r0 repository.ConsumerLimit
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, int64) (repository.ConsumerLimit, error)); ok {
		return rf(ctx, consumerLimitID)
	}
	if rf, ok := ret.Get(0).(func(context.Context, int64) repository.ConsumerLimit); ok {
		r0 = rf(ctx, consumerLimitID)
	} else {
		r0 = ret.Get(0).(repository.ConsumerLimit)
	}

	if rf, ok := ret.Get(1).(func(context.Context, int64) error); ok {
		r1 = rf(ctx, consumerLimitID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetLimitByTenureAndConsumerID provides a mock function with given fields: ctx, tenure, consumerID
func (_m *ConsumerLimitRepository) GetLimitByTenureAndConsumerID(ctx context.Context, tenure int16, consumerID int64) (repository.ConsumerLimit, error) {
	ret := _m.Called(ctx, tenure, consumerID)

	if len(ret) == 0 {
		panic("no return value specified for GetLimitByTenureAndConsumerID")
	}

	var r0 repository.ConsumerLimit
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, int16, int64) (repository.ConsumerLimit, error)); ok {
		return rf(ctx, tenure, consumerID)
	}
	if rf, ok := ret.Get(0).(func(context.Context, int16, int64) repository.ConsumerLimit); ok {
		r0 = rf(ctx, tenure, consumerID)
	} else {
		r0 = ret.Get(0).(repository.ConsumerLimit)
	}

	if rf, ok := ret.Get(1).(func(context.Context, int16, int64) error); ok {
		r1 = rf(ctx, tenure, consumerID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateConsumerLimit provides a mock function with given fields: ctx, consumerLimit
func (_m *ConsumerLimitRepository) UpdateConsumerLimit(ctx context.Context, consumerLimit repository.ConsumerLimit) error {
	ret := _m.Called(ctx, consumerLimit)

	if len(ret) == 0 {
		panic("no return value specified for UpdateConsumerLimit")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, repository.ConsumerLimit) error); ok {
		r0 = rf(ctx, consumerLimit)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// NewConsumerLimitRepository creates a new instance of ConsumerLimitRepository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewConsumerLimitRepository(t interface {
	mock.TestingT
	Cleanup(func())
}) *ConsumerLimitRepository {
	mock := &ConsumerLimitRepository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
