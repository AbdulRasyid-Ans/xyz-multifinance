// Code generated by mockery v2.50.4. DO NOT EDIT.

package mocks

import (
	context "context"

	repository "github.com/AbdulRasyid-Ans/xyz-multifinance/internal/repository"
	mock "github.com/stretchr/testify/mock"

	sql "database/sql"
)

// LoanRepository is an autogenerated mock type for the LoanRepository type
type LoanRepository struct {
	mock.Mock
}

// CreateLoan provides a mock function with given fields: ctx, loan
func (_m *LoanRepository) CreateLoan(ctx context.Context, loan repository.Loan) (int64, error) {
	ret := _m.Called(ctx, loan)

	if len(ret) == 0 {
		panic("no return value specified for CreateLoan")
	}

	var r0 int64
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, repository.Loan) (int64, error)); ok {
		return rf(ctx, loan)
	}
	if rf, ok := ret.Get(0).(func(context.Context, repository.Loan) int64); ok {
		r0 = rf(ctx, loan)
	} else {
		r0 = ret.Get(0).(int64)
	}

	if rf, ok := ret.Get(1).(func(context.Context, repository.Loan) error); ok {
		r1 = rf(ctx, loan)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteLoan provides a mock function with given fields: ctx, loanID
func (_m *LoanRepository) DeleteLoan(ctx context.Context, loanID int64) error {
	ret := _m.Called(ctx, loanID)

	if len(ret) == 0 {
		panic("no return value specified for DeleteLoan")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, int64) error); ok {
		r0 = rf(ctx, loanID)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GetLoanByConsumerID provides a mock function with given fields: ctx, consumerID
func (_m *LoanRepository) GetLoanByConsumerID(ctx context.Context, consumerID int64) ([]repository.Loan, error) {
	ret := _m.Called(ctx, consumerID)

	if len(ret) == 0 {
		panic("no return value specified for GetLoanByConsumerID")
	}

	var r0 []repository.Loan
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, int64) ([]repository.Loan, error)); ok {
		return rf(ctx, consumerID)
	}
	if rf, ok := ret.Get(0).(func(context.Context, int64) []repository.Loan); ok {
		r0 = rf(ctx, consumerID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]repository.Loan)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, int64) error); ok {
		r1 = rf(ctx, consumerID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetLoanByID provides a mock function with given fields: ctx, loanID
func (_m *LoanRepository) GetLoanByID(ctx context.Context, loanID int64) (repository.Loan, error) {
	ret := _m.Called(ctx, loanID)

	if len(ret) == 0 {
		panic("no return value specified for GetLoanByID")
	}

	var r0 repository.Loan
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, int64) (repository.Loan, error)); ok {
		return rf(ctx, loanID)
	}
	if rf, ok := ret.Get(0).(func(context.Context, int64) repository.Loan); ok {
		r0 = rf(ctx, loanID)
	} else {
		r0 = ret.Get(0).(repository.Loan)
	}

	if rf, ok := ret.Get(1).(func(context.Context, int64) error); ok {
		r1 = rf(ctx, loanID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateLoan provides a mock function with given fields: ctx, req, tx
func (_m *LoanRepository) UpdateLoan(ctx context.Context, req repository.UpdateLoanRequest, tx *sql.Tx) error {
	ret := _m.Called(ctx, req, tx)

	if len(ret) == 0 {
		panic("no return value specified for UpdateLoan")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, repository.UpdateLoanRequest, *sql.Tx) error); ok {
		r0 = rf(ctx, req, tx)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// NewLoanRepository creates a new instance of LoanRepository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewLoanRepository(t interface {
	mock.TestingT
	Cleanup(func())
}) *LoanRepository {
	mock := &LoanRepository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
