// Code generated by mockery v2.50.4. DO NOT EDIT.

package mocks

import (
	context "context"

	usecase "github.com/AbdulRasyid-Ans/xyz-multifinance/internal/usecase"
	mock "github.com/stretchr/testify/mock"
)

// ConsumerUsecase is an autogenerated mock type for the ConsumerUsecase type
type ConsumerUsecase struct {
	mock.Mock
}

// CreateConsumer provides a mock function with given fields: ctx, request
func (_m *ConsumerUsecase) CreateConsumer(ctx context.Context, request usecase.ConsumerRequest) (int64, error) {
	ret := _m.Called(ctx, request)

	if len(ret) == 0 {
		panic("no return value specified for CreateConsumer")
	}

	var r0 int64
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, usecase.ConsumerRequest) (int64, error)); ok {
		return rf(ctx, request)
	}
	if rf, ok := ret.Get(0).(func(context.Context, usecase.ConsumerRequest) int64); ok {
		r0 = rf(ctx, request)
	} else {
		r0 = ret.Get(0).(int64)
	}

	if rf, ok := ret.Get(1).(func(context.Context, usecase.ConsumerRequest) error); ok {
		r1 = rf(ctx, request)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteConsumer provides a mock function with given fields: ctx, id
func (_m *ConsumerUsecase) DeleteConsumer(ctx context.Context, id int64) error {
	ret := _m.Called(ctx, id)

	if len(ret) == 0 {
		panic("no return value specified for DeleteConsumer")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, int64) error); ok {
		r0 = rf(ctx, id)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// FetchConsumer provides a mock function with given fields: ctx, req
func (_m *ConsumerUsecase) FetchConsumer(ctx context.Context, req usecase.FetchConsumerRequest) ([]usecase.GetConsumerResponse, error) {
	ret := _m.Called(ctx, req)

	if len(ret) == 0 {
		panic("no return value specified for FetchConsumer")
	}

	var r0 []usecase.GetConsumerResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, usecase.FetchConsumerRequest) ([]usecase.GetConsumerResponse, error)); ok {
		return rf(ctx, req)
	}
	if rf, ok := ret.Get(0).(func(context.Context, usecase.FetchConsumerRequest) []usecase.GetConsumerResponse); ok {
		r0 = rf(ctx, req)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]usecase.GetConsumerResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, usecase.FetchConsumerRequest) error); ok {
		r1 = rf(ctx, req)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetConsumerByID provides a mock function with given fields: ctx, id
func (_m *ConsumerUsecase) GetConsumerByID(ctx context.Context, id int64) (usecase.GetConsumerResponse, error) {
	ret := _m.Called(ctx, id)

	if len(ret) == 0 {
		panic("no return value specified for GetConsumerByID")
	}

	var r0 usecase.GetConsumerResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, int64) (usecase.GetConsumerResponse, error)); ok {
		return rf(ctx, id)
	}
	if rf, ok := ret.Get(0).(func(context.Context, int64) usecase.GetConsumerResponse); ok {
		r0 = rf(ctx, id)
	} else {
		r0 = ret.Get(0).(usecase.GetConsumerResponse)
	}

	if rf, ok := ret.Get(1).(func(context.Context, int64) error); ok {
		r1 = rf(ctx, id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateConsumer provides a mock function with given fields: ctx, id, request
func (_m *ConsumerUsecase) UpdateConsumer(ctx context.Context, id int64, request usecase.ConsumerRequest) error {
	ret := _m.Called(ctx, id, request)

	if len(ret) == 0 {
		panic("no return value specified for UpdateConsumer")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, int64, usecase.ConsumerRequest) error); ok {
		r0 = rf(ctx, id, request)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// NewConsumerUsecase creates a new instance of ConsumerUsecase. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewConsumerUsecase(t interface {
	mock.TestingT
	Cleanup(func())
}) *ConsumerUsecase {
	mock := &ConsumerUsecase{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
